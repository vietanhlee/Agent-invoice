from typing import TypedDict, List
from uuid import uuid4

from langgraph.graph import StateGraph, END, START
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI

# Load environment variables
load_dotenv()

# Initialize LLM
llm = ChatGoogleGenerativeAI(model='gemini-2.5-flash')
# Import your existing tools
from tools import (
    read_excel_data,
    get_prompt_for_data_excel,
    create_invoice_docx,
    InvoiceDetails,
)

# -------------------------
# 1. Khai b√°o AgentState
# -------------------------
class AgentState(TypedDict):
    user_request: str
    file_name: str
    raw_data: List[List[str]]
    extracted_data: InvoiceDetails
    final_docx: str
    response: str
    should_process_invoice: bool

# -------------------------
# 2. LLM Chat Node - X·ª≠ l√Ω c√¢u h·ªèi v√† tr·∫£ l·ªùi
# -------------------------
def llm_chat_node(state: AgentState) -> AgentState:
    """Node LLM ƒë·ªÉ chat v√† x·ª≠ l√Ω c√¢u h·ªèi t·ª´ user."""
    print("üí¨ LLM ƒëang x·ª≠ l√Ω c√¢u h·ªèi...")
    
    user_question = state["user_request"]
    
    # T·∫°o prompt cho LLM
    chat_prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh chuy√™n v·ªÅ x·ª≠ l√Ω h√≥a ƒë∆°n v√† k·∫ø to√°n.

Ng∆∞·ªùi d√πng h·ªèi: "{user_question}"

H√£y ph√¢n t√≠ch c√¢u h·ªèi v√†:
1. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn T·∫†O H√ìA ƒê∆†N t·ª´ EXCEL, h√£y tr·∫£ l·ªùi: "PROCESS_INVOICE: [c√¢u tr·∫£ l·ªùi h∆∞·ªõng d·∫´n]"
2. N·∫øu l√† c√¢u h·ªèi th∆∞·ªùng, h√£y tr·∫£ l·ªùi tr·ª±c ti·∫øp m·ªôt c√°ch th√¢n thi·ªán v√† h·ªØu √≠ch.

V√≠ d·ª•:
- "T·∫°o h√≥a ƒë∆°n t·ª´ Excel" ‚Üí "PROCESS_INVOICE: T√¥i s·∫Ω gi√∫p b·∫°n t·∫°o h√≥a ƒë∆°n t·ª´ file Excel. H√£y cung c·∫•p t√™n file Excel c·ªßa b·∫°n."
- "H√¥m nay th·∫ø n√†o?" ‚Üí "T√¥i ƒëang s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! B·∫°n c√≥ c·∫ßn gi√∫p ƒë·ª° g√¨ v·ªÅ h√≥a ƒë∆°n kh√¥ng?"

Tr·∫£ l·ªùi:
"""
    
    # G·ªçi LLM
    try:
        llm_response = llm.invoke(chat_prompt)
        response_content = llm_response.content if hasattr(llm_response, 'content') else str(llm_response)
        
        # Ki·ªÉm tra xem c√≥ c·∫ßn x·ª≠ l√Ω h√≥a ƒë∆°n kh√¥ng
        if "PROCESS_INVOICE:" in response_content:
            state["should_process_invoice"] = True
            state["response"] = response_content.replace("PROCESS_INVOICE:", "").strip()
        else:
            state["should_process_invoice"] = False
            state["response"] = response_content
            
    except Exception as e:
        state["should_process_invoice"] = False
        state["response"] = f"Xin l·ªói, c√≥ l·ªói x·∫£y ra: {str(e)}"
    
    return state

# -------------------------
# 3. C√°c node x·ª≠ l√Ω h√≥a ƒë∆°n
# -------------------------
def read_excel_node(state: AgentState) -> AgentState:
    """ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel"""
    print("üì• ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel...")
    # try:
    state["raw_data"] = read_excel_data(file_path=state["file_name"])
    print(f"‚úÖ ƒê√£ ƒë·ªçc {len(state['raw_data'])} d√≤ng d·ªØ li·ªáu")
    # except Exception as e:
    #     print(f"‚ùå L·ªói ƒë·ªçc Excel: {e}")
    #     state["response"] = f"L·ªói khi ƒë·ªçc file Excel: {str(e)}"
    
    return state

def extract_info_node(state: AgentState) -> AgentState:
    """Tr√≠ch xu·∫•t th√¥ng tin t·ª´ d·ªØ li·ªáu Excel"""
    print("üß† Tr√≠ch xu·∫•t th√¥ng tin t·ª´ d·ªØ li·ªáu Excel...")
    try:
        prompt = get_prompt_for_data_excel(data_excel_str=state["raw_data"])
        llm_response = llm.invoke(prompt)
        response_content = llm_response.content if hasattr(llm_response, 'content') else str(llm_response)
        
        # TODO: Parse JSON response ƒë·ªÉ t·∫°o InvoiceDetails
        # Hi·ªán t·∫°i ch·ªâ l∆∞u response string
        state["response"] = f"‚úÖ ƒê√£ tr√≠ch xu·∫•t th√¥ng tin: {response_content[:200]}..."
        
    except Exception as e:
        print(f"‚ùå L·ªói tr√≠ch xu·∫•t: {e}")
        state["response"] = f"L·ªói khi tr√≠ch xu·∫•t th√¥ng tin: {str(e)}"
    
    return state

def create_docx_node(state: AgentState) -> AgentState:
    """T·∫°o file h√≥a ƒë∆°n DOCX"""
    print("üìÑ T·∫°o file ho√° ƒë∆°n DOCX...")
    try:
        if not state.get("final_docx"):
            state["final_docx"] = f"invoice_{uuid4().hex[:6]}.docx"

        output_path = create_invoice_docx(
            invoice_data=state["extracted_data"],
            output_path=state["final_docx"],
        )
        state["final_docx"] = output_path
        state["response"] = f"üéâ ƒê√£ t·∫°o h√≥a ƒë∆°n th√†nh c√¥ng t·∫°i: {output_path}"
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o DOCX: {e}")
        state["response"] = f"L·ªói khi t·∫°o file DOCX: {str(e)}"
    
    return state

# -------------------------
# 4. Function ƒë·ªÉ ƒë·ªãnh tuy·∫øn
# -------------------------
def determine_next_step(state: AgentState) -> str:
    """X√°c ƒë·ªãnh b∆∞·ªõc ti·∫øp theo d·ª±a tr√™n state"""
    if state.get("should_process_invoice", False):
        print("üß≠ Routing: Chuy·ªÉn ƒë·∫øn x·ª≠ l√Ω h√≥a ƒë∆°n")
        return "read_excel"
    else:
        print("üß≠ Routing: Ch·ªâ chat, k·∫øt th√∫c")
        return "end"

# -------------------------
# 5. X√¢y d·ª±ng LangGraph
# -------------------------
def build_graph():
    """X√¢y d·ª±ng v√† tr·∫£ v·ªÅ graph"""
    graph_builder = StateGraph(AgentState)

    # Th√™m c√°c nodes
    graph_builder.add_node(node= "llm_chat", action= llm_chat_node)
    graph_builder.add_node("read_excel", read_excel_node)
    graph_builder.add_node("extract_info", extract_info_node)
    graph_builder.add_node("create_docx", create_docx_node)

    # Set entry point
    graph_builder.set_entry_point("llm_chat")

    # Th√™m conditional edges t·ª´ llm_chat
    graph_builder.add_conditional_edges(
        source= "llm_chat",
        path= determine_next_step,
        path_map= {
            "read_excel": "read_excel",
            "end": END,
        },
    )

    # Th√™m c√°c edges tu·∫ßn t·ª± cho quy tr√¨nh x·ª≠ l√Ω h√≥a ƒë∆°n
    graph_builder.add_edge(start_key="read_excel", end_key= "extract_info")
    graph_builder.add_edge("extract_info", "create_docx")
    graph_builder.add_edge("create_docx", END)

    return graph_builder.compile()

# Compile graph
app = build_graph()

# -------------------------
# 6. Interactive Chat Function
# -------------------------
def chat_with_agent():
    """H√†m chat t∆∞∆°ng t√°c v·ªõi agent"""
    print("ü§ñ Ch√†o m·ª´ng! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?")
    print("(G√µ 'quit' ƒë·ªÉ tho√°t)")
    
    while True:
        user_input = input("\nüë§ B·∫°n: ").strip()
        
        if user_input.lower() in ['quit', 'exit', 'tho√°t']:
            print("üëã T·∫°m bi·ªát!")
            break
            
        if not user_input:
            continue
        
        try:
            # T·∫°o state cho c√¢u h·ªèi
            initial_state = {
                "user_request": user_input,
                # "file_name": "test1.xlsx",  # Default file name
                # "raw_data": [],
                # "extracted_data": InvoiceDetails(
                #     ten_nguoi_ban="",
                #     dia_chi_nguoi_ban="",
                #     ten_nguoi_mua="",
                #     dia_chi_nguoi_mua="",
                #     ngay_hoa_don="",
                #     danh_sach_san_pham=[],
                #     tong_cong=0.0,
                #     thue_vat=0.0,
                #     tong_thanh_toan=0.0,
                # ),
                # "final_docx": "",
                # "response": "",
                # "should_process_invoice": False
            }
            
            # Ch·∫°y agent
            result = app.invoke(initial_state)
            
            # In response
            print(f"ü§ñ Agent: {result['response']}")
            
            # N·∫øu c√≥ t·∫°o file th√¨ th√¥ng b√°o
            if result.get('final_docx') and result['final_docx'] != "":
                print(f"üìÅ File ƒë√£ t·∫°o: {result['final_docx']}")
                
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")

# -------------------------
# 7. Main execution
# -------------------------
if __name__ == "__main__":
    # # Test v·ªõi sample data
    # sample_state = {
    #     "user_request": "Xin ch√†o, b·∫°n c√≥ th·ªÉ gi√∫p t√¥i t·∫°o h√≥a ƒë∆°n t·ª´ Excel kh√¥ng?",
    #     "file_name": "test1.xlsx",
    #     "raw_data": [],
    #     "extracted_data": InvoiceDetails(
    #         ten_nguoi_ban="C√¥ng ty ABC",
    #         dia_chi_nguoi_ban="H√† N·ªôi",
    #         ten_nguoi_mua="C√¥ng ty XYZ",
    #         dia_chi_nguoi_mua="TP HCM",
    #         ngay_hoa_don="07/08/2025",
    #         danh_sach_san_pham=[],
    #         tong_cong=0.0,
    #         thue_vat=0.0,
    #         tong_thanh_toan=0.0,
    #     ),
    #     "final_docx": "",
    #     "response": "",
    #     "should_process_invoice": False
    # }

    # print("=== TEST RUN ===")
    # try:
    #     result = app.invoke(sample_state)
    #     print(f"‚úÖ Response: {result['response']}")
    #     print(f"‚úÖ Should process invoice: {result['should_process_invoice']}")
        
    #     if result.get('final_docx'):
    #         print(f"‚úÖ File created: {result['final_docx']}")
            
    # except Exception as e:
    #     print(f"‚ùå Test failed: {e}")
    
    print("\n=== INTERACTIVE CHAT ===")
    chat_with_agent()